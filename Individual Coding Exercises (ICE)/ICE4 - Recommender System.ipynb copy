{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8b06fdd7",
   "metadata": {},
   "source": [
    "# Recommender Systems"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd6bd059",
   "metadata": {},
   "source": [
    "**Course:** HUDK 4051"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25403c7b",
   "metadata": {},
   "source": [
    "**Author:** Yutong Shen"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9299919",
   "metadata": {},
   "source": [
    "**Assignment:** ICE4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35392917",
   "metadata": {},
   "source": [
    "## Recommender System"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4023a62a",
   "metadata": {},
   "source": [
    "Recommender Systems (RSs) are software, tools, and techniques providing suggestions for items to be of use to a user. The suggestions relate to various decision-making processes: Amazon uses it to suggest products to customers, YouTube uses it to decide which video to play next on autoplay, and Facebook uses it to recommend pages to like and people to follow. In the educational world, the most common application of RSs is to recommend appropriate learning resources (e.g., readings, projects, practices, courses) to a learner.\n",
    "\n",
    "There are two types of common RSs implementations (i.e., content-based recommender and collaborative filter) that exist."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01338b54",
   "metadata": {},
   "source": [
    "## Building an RS for Learning Modules"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02a2f95d",
   "metadata": {},
   "source": [
    "Suppose that we have a self-guided LA course with seven units that learners can choose based on their preference. Our purpose is to make recommendations to learners based on their interest and preference. We have collected some ratings of the units from previous learners in terms of both interest and difficulty.\n",
    "\n",
    "Let's start by loading both the interest and difficulty csv files:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c2b0405f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "55f067d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "interest = pd.read_csv(\"interest.csv\")\n",
    "difficulty = pd.read_csv(\"difficulty.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f056b2be",
   "metadata": {},
   "source": [
    "In both dataset, student names are anonymized and seven topics (i.e., prediction, nlp, sna, neural networks, data visualization, sql, and closing the loop of learning analytics) are rated on a Likert scale from 1-5 (i.e., 1 being the least interested/difficult). Feel free to do some exploratory analysis to get to know the dataset a bit better as you wish."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6151f5e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>prediction.interest</th>\n",
       "      <th>nlp.interest</th>\n",
       "      <th>sna.interest</th>\n",
       "      <th>neural.interest</th>\n",
       "      <th>viz.interest</th>\n",
       "      <th>loop.interest</th>\n",
       "      <th>sql.interest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>s1</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>s2</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>s3</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>s4</td>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>s5</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  prediction.interest  nlp.interest  sna.interest  neural.interest  \\\n",
       "0  s1                    5           5.0             4              5.0   \n",
       "1  s2                    5           5.0             5              5.0   \n",
       "2  s3                    5           5.0             5              5.0   \n",
       "3  s4                    4           5.0             5              5.0   \n",
       "4  s5                    4           4.0             4              5.0   \n",
       "\n",
       "   viz.interest  loop.interest  sql.interest  \n",
       "0             2            4.0           5.0  \n",
       "1             5            5.0           5.0  \n",
       "2             5            4.0           4.0  \n",
       "3             5            5.0           5.0  \n",
       "4             4            4.0           5.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interest.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a46c628c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prediction.interest</th>\n",
       "      <th>nlp.interest</th>\n",
       "      <th>sna.interest</th>\n",
       "      <th>neural.interest</th>\n",
       "      <th>viz.interest</th>\n",
       "      <th>loop.interest</th>\n",
       "      <th>sql.interest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>52.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>51.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.326923</td>\n",
       "      <td>4.431373</td>\n",
       "      <td>4.134615</td>\n",
       "      <td>4.490196</td>\n",
       "      <td>4.596154</td>\n",
       "      <td>4.431373</td>\n",
       "      <td>4.431373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.042643</td>\n",
       "      <td>0.781150</td>\n",
       "      <td>1.048413</td>\n",
       "      <td>0.809260</td>\n",
       "      <td>0.773574</td>\n",
       "      <td>0.781150</td>\n",
       "      <td>0.922061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.750000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       prediction.interest  nlp.interest  sna.interest  neural.interest  \\\n",
       "count            52.000000     51.000000     52.000000        51.000000   \n",
       "mean              4.326923      4.431373      4.134615         4.490196   \n",
       "std               1.042643      0.781150      1.048413         0.809260   \n",
       "min               1.000000      3.000000      1.000000         3.000000   \n",
       "25%               4.000000      4.000000      3.000000         4.000000   \n",
       "50%               5.000000      5.000000      4.500000         5.000000   \n",
       "75%               5.000000      5.000000      5.000000         5.000000   \n",
       "max               5.000000      5.000000      5.000000         5.000000   \n",
       "\n",
       "       viz.interest  loop.interest  sql.interest  \n",
       "count     52.000000      51.000000     51.000000  \n",
       "mean       4.596154       4.431373      4.431373  \n",
       "std        0.773574       0.781150      0.922061  \n",
       "min        2.000000       3.000000      2.000000  \n",
       "25%        4.750000       4.000000      4.000000  \n",
       "50%        5.000000       5.000000      5.000000  \n",
       "75%        5.000000       5.000000      5.000000  \n",
       "max        5.000000       5.000000      5.000000  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interest.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "46e22ff0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>prediction.difficulty</th>\n",
       "      <th>nlp.difficulty</th>\n",
       "      <th>sna.difficulty</th>\n",
       "      <th>neural.difficulty</th>\n",
       "      <th>viz.difficulty</th>\n",
       "      <th>loop.difficulty</th>\n",
       "      <th>sql.difficulty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>s1</td>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>s2</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>s3</td>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>s4</td>\n",
       "      <td>3</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>s5</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  prediction.difficulty  nlp.difficulty  sna.difficulty  \\\n",
       "0  s1                      4             5.0               3   \n",
       "1  s2                      5             5.0               5   \n",
       "2  s3                      3             3.0               3   \n",
       "3  s4                      3             4.0               4   \n",
       "4  s5                      4             4.0               4   \n",
       "\n",
       "   neural.difficulty  viz.difficulty  loop.difficulty  sql.difficulty  \n",
       "0                5.0             3.0              3.0             5.0  \n",
       "1                5.0             5.0              5.0             5.0  \n",
       "2                3.0             3.0              3.0             2.0  \n",
       "3                4.0             4.0              5.0             3.0  \n",
       "4                5.0             4.0              4.0             4.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "difficulty.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "10957017",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prediction.difficulty</th>\n",
       "      <th>nlp.difficulty</th>\n",
       "      <th>sna.difficulty</th>\n",
       "      <th>neural.difficulty</th>\n",
       "      <th>viz.difficulty</th>\n",
       "      <th>loop.difficulty</th>\n",
       "      <th>sql.difficulty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>52.000000</td>\n",
       "      <td>50.00000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>49.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.807692</td>\n",
       "      <td>4.22000</td>\n",
       "      <td>3.769231</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>4.060000</td>\n",
       "      <td>4.080000</td>\n",
       "      <td>3.693878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.864064</td>\n",
       "      <td>0.86402</td>\n",
       "      <td>0.899137</td>\n",
       "      <td>0.782461</td>\n",
       "      <td>0.818411</td>\n",
       "      <td>0.829064</td>\n",
       "      <td>1.103103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.00000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.00000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.00000</td>\n",
       "      <td>4.250000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.00000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       prediction.difficulty  nlp.difficulty  sna.difficulty  \\\n",
       "count              52.000000        50.00000       52.000000   \n",
       "mean                3.807692         4.22000        3.769231   \n",
       "std                 0.864064         0.86402        0.899137   \n",
       "min                 2.000000         2.00000        2.000000   \n",
       "25%                 3.000000         4.00000        3.000000   \n",
       "50%                 4.000000         4.00000        4.000000   \n",
       "75%                 5.000000         5.00000        4.250000   \n",
       "max                 5.000000         5.00000        5.000000   \n",
       "\n",
       "       neural.difficulty  viz.difficulty  loop.difficulty  sql.difficulty  \n",
       "count          50.000000       50.000000        50.000000       49.000000  \n",
       "mean            4.400000        4.060000         4.080000        3.693878  \n",
       "std             0.782461        0.818411         0.829064        1.103103  \n",
       "min             2.000000        3.000000         3.000000        1.000000  \n",
       "25%             4.000000        3.000000         3.000000        3.000000  \n",
       "50%             5.000000        4.000000         4.000000        4.000000  \n",
       "75%             5.000000        5.000000         5.000000        5.000000  \n",
       "max             5.000000        5.000000         5.000000        5.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "difficulty.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9f0decb",
   "metadata": {},
   "source": [
    "The data wrangling task is to create a dataset with rows being the seven units while the columns are the mean of the difficulty ratings and the interest ratings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2b03c63f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:14: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
      "  \n",
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:17: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>difficulty</th>\n",
       "      <th>interest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>prediction</th>\n",
       "      <td>3.807692</td>\n",
       "      <td>4.326923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nlp</th>\n",
       "      <td>4.220000</td>\n",
       "      <td>4.431373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sna</th>\n",
       "      <td>3.769231</td>\n",
       "      <td>4.134615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neural</th>\n",
       "      <td>4.400000</td>\n",
       "      <td>4.490196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>viz</th>\n",
       "      <td>4.060000</td>\n",
       "      <td>4.596154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loop</th>\n",
       "      <td>4.080000</td>\n",
       "      <td>4.431373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sql</th>\n",
       "      <td>3.693878</td>\n",
       "      <td>4.431373</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            difficulty  interest\n",
       "prediction    3.807692  4.326923\n",
       "nlp           4.220000  4.431373\n",
       "sna           3.769231  4.134615\n",
       "neural        4.400000  4.490196\n",
       "viz           4.060000  4.596154\n",
       "loop          4.080000  4.431373\n",
       "sql           3.693878  4.431373"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "difficulty = pd.DataFrame(difficulty.mean())\n",
    "difficulty.index = ['prediction', 'nlp', 'sna', 'neural', 'viz', 'loop', 'sql']\n",
    "\n",
    "interest = pd.DataFrame(interest.mean())\n",
    "interest.index = ['prediction', 'nlp', 'sna', 'neural', 'viz', 'loop', 'sql']\n",
    "\n",
    "difficulty_interest = difficulty\n",
    "difficulty_interest.columns = ['difficulty']\n",
    "difficulty_interest['interest'] = interest\n",
    "\n",
    "difficulty_interest"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de8da70d",
   "metadata": {},
   "source": [
    "## Content-Based Recommender"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe9da9e7",
   "metadata": {},
   "source": [
    "Content-based recommenders suggest similar items based on a particular item. This system uses item metadata, such as ratings, description, comments, etc. to make these recommendations. The general idea behind these recommender systems is that if a person likes a particular item, they will also like an item that is similar to it. And to recommend that, it will make use of the user's past item metadata. A good example could be YouTube, where based on your history, it suggests you new videos that you could potentially watch.\n",
    "\n",
    "In that sense, our task is simplied to identifying the similar items (i.e., LA units) in our dataset. Does that sound familiar to you? Yes, any distance-based algorithms (e.g., KNN) will be great for measuring similarities. If you just want to do some simple explorations, clustering is also a good place to start.\n",
    "\n",
    "In our case, the metadata only consists of the difficulty and the interest, which makes it easy to plot:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "98c30a2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'interest')"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the basic scatter plot\n",
    "plt.scatter(difficulty_interest.difficulty, difficulty_interest.interest)\n",
    "\n",
    "# Add lables to each point\n",
    "for i, index in enumerate (difficulty_interest.index):\n",
    "    plt.text(difficulty_interest.difficulty[i]+0.01, difficulty_interest.interest[i]+0.01, index)\n",
    "    \n",
    "# Adjust the axis limit and label\n",
    "plt.xlim (3.5, 4.7)\n",
    "plt.ylim (4.0, 4.7)\n",
    "plt.xlabel(\"difficulty\")\n",
    "plt.ylabel(\"interest\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "341233a6",
   "metadata": {},
   "source": [
    "Following the same idea of KNN, we can measure the distance (distance measure will do) of any given point to the rest of the points in the dataset. The algorithm below is not the most effective way to acomplish this task, but it should be fairly easy to read."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ed4b4e0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>difficulty</th>\n",
       "      <th>interest</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>prediction</th>\n",
       "      <td>3.807692</td>\n",
       "      <td>4.326923</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sql</th>\n",
       "      <td>3.693878</td>\n",
       "      <td>4.431373</td>\n",
       "      <td>0.154478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sna</th>\n",
       "      <td>3.769231</td>\n",
       "      <td>4.134615</td>\n",
       "      <td>0.196116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loop</th>\n",
       "      <td>4.080000</td>\n",
       "      <td>4.431373</td>\n",
       "      <td>0.291652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>viz</th>\n",
       "      <td>4.060000</td>\n",
       "      <td>4.596154</td>\n",
       "      <td>0.368977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nlp</th>\n",
       "      <td>4.220000</td>\n",
       "      <td>4.431373</td>\n",
       "      <td>0.425332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neural</th>\n",
       "      <td>4.400000</td>\n",
       "      <td>4.490196</td>\n",
       "      <td>0.614399</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            difficulty  interest  distance\n",
       "prediction    3.807692  4.326923  0.000000\n",
       "sql           3.693878  4.431373  0.154478\n",
       "sna           3.769231  4.134615  0.196116\n",
       "loop          4.080000  4.431373  0.291652\n",
       "viz           4.060000  4.596154  0.368977\n",
       "nlp           4.220000  4.431373  0.425332\n",
       "neural        4.400000  4.490196  0.614399"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math # You will need math library to calculate the eulidician distance\n",
    "\n",
    "# Create a new column called distance. And assign 0 to all rows temporarily.\n",
    "difficulty_interest_distance = difficulty_interest.copy()\n",
    "difficulty_interest_distance['distance'] = 0\n",
    "\n",
    "# Pick any row to start. Here I am using prediction as an example\n",
    "item = difficulty_interest_distance.loc['prediction',]\n",
    "\n",
    "# Loop around the data frame index; Obtain the target row; Calculate the distance\n",
    "# Assign to d; And assign to the corresponding cell.\n",
    "for i in difficulty_interest_distance.index:\n",
    "    target = difficulty_interest_distance.loc[i,]\n",
    "#     d = math.dist(item, target)\n",
    "    d = np.linalg.norm(item - target)\n",
    "    difficulty_interest_distance.loc[i, 'distance'] = d\n",
    "\n",
    "# Sort the result by distance\n",
    "difficulty_interest_distance.sort_values('distance', ascending=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88b5b9c4",
   "metadata": {},
   "source": [
    "Based on the distance, prediction is mostly similar to sql considering both the difficulty and the interest while neural is the least similar. As a result, based on the current item prediction, we would recommend sql.\n",
    "\n",
    "Another popular way in RSs implementation is to use the cosine similarity to measure the distance. The cosine similarity to calculate a numeric quantity that denotes the similarity between two movies. You use the cosine similarity score since it is independent of magnitude and is relatively easy and fast to calculate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "37626fdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.99922723, 0.99984605, 0.99856397, 0.99999823,\n",
       "        0.99974724, 0.99964159],\n",
       "       [0.99922723, 1.        , 0.99976308, 0.99989801, 0.99929948,\n",
       "        0.99985835, 0.99781682],\n",
       "       [0.99984605, 0.99976308, 1.        , 0.99935025, 0.99987732,\n",
       "        0.99998782, 0.99901794],\n",
       "       [0.99856397, 0.99989801, 0.99935025, 1.        , 0.99866309,\n",
       "        0.999516  , 0.99677186],\n",
       "       [0.99999823, 0.99929948, 0.99987732, 0.99866309, 1.        ,\n",
       "        0.99978781, 0.99958939],\n",
       "       [0.99974724, 0.99985835, 0.99998782, 0.999516  , 0.99978781,\n",
       "        1.        , 0.99878705],\n",
       "       [0.99964159, 0.99781682, 0.99901794, 0.99677186, 0.99958939,\n",
       "        0.99878705, 1.        ]])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "cosine_sim = cosine_similarity(difficulty_interest)\n",
    "cosine_sim"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "889708e1",
   "metadata": {},
   "source": [
    "Once we have the similarity matrix, the rest of the tasks are easy. We can encapsulate the recommendation procedure into one function. The function needs to:\n",
    "* Get the index of the module given its title.\n",
    "* Get the list of cosine similarity scores for that particular movie with all movies. Convert it into a list of tuples where the first element is its position, and the second is the similarity score.\n",
    "* Sort the aforementioned list of tuples based on the similarity scores; that is, the second element.\n",
    "* Get the top 5 elements of this list. Ignore the first element as it refers to self (the module is most similar to itself).\n",
    "* Return the names corresponding to the indices of the top elements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "216e9dfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "prediction    0\n",
       "nlp           1\n",
       "sna           2\n",
       "neural        3\n",
       "viz           4\n",
       "loop          5\n",
       "sql           6\n",
       "dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Before we move forward, we need to create a index for the module\n",
    "module_indices = pd.Series(range(len(difficulty_interest.index)), index = difficulty_interest.index)\n",
    "\n",
    "module_indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "c1c61721",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_recommendations(name, cosine_sim, matrix_indices):\n",
    "    # Get the index of the movie that matches the title\n",
    "    idx = matrix_indices[name]\n",
    "\n",
    "    # Get the pairwsie similarity scores of all movies with that movie\n",
    "    sim_scores = list(enumerate(cosine_sim[idx]))\n",
    "\n",
    "    # Sort the movies based on the similarity scores\n",
    "    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n",
    "\n",
    "    # Get the scores of the 10 most similar movies\n",
    "    sim_scores = sim_scores[1:6]\n",
    "\n",
    "    # Get the movie indices\n",
    "    rank_indices = [i[0] for i in sim_scores]\n",
    "\n",
    "    # Return the top 10 most similar movies\n",
    "    return matrix_indices.iloc[rank_indices]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "052fe600",
   "metadata": {},
   "source": [
    "Now, we can make a quick query to find out which items are most similar to any given item. Based on the cosine similarity measure, this time viz is mostly similar to prediction. But the top four choice is quite similar to the nearest neighbor method measured by euclidean distance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "c0873692",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "viz     4\n",
       "sna     2\n",
       "loop    5\n",
       "sql     6\n",
       "nlp     1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_recommendations(\"prediction\", cosine_sim, module_indices)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00c625b7",
   "metadata": {},
   "source": [
    "However, it is worth noting that, the data do not have a whole lot of variabilities -- all the means are actually quite similar, so it is not surprising that the recommendations by two methods are not in the same order. Another important thing to make is that there are several additional similarity metrics that you can use for this, such as the manhattan and Pearson. But there is no right answer to which score is the best. Different scores work well in different scenarios, and it is often a good idea to experiment with different metrics and observe the results. In our case, euclidean distance is probably a better choice."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "330c7a36",
   "metadata": {},
   "source": [
    "## Collaborative Filter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3050849a",
   "metadata": {},
   "source": [
    "In constrast to content-based recommender, collaborative filter (CF) relies on the dynamic input of the user data and make recommendations. Collaborative filters can further be classified into two types:\n",
    "\n",
    "* Item-based Filtering: This type of CF is extremely similar to the content recommendation engine that we have seen previously. Item-based CF identifies similar items based on how people have assessed it in the past. For example, if Alice, Bob, and Eve have given 5 stars to the prediction module and sql module, the system identifies the items as similar. Therefore, if someone buys prediction module, the system also recommends sql module to them. This assessment can change over time based on the incoming data and reflect the current trend. In contrast, content-based recommenders rely more on static and descriptive data. So in this sense, what we have built previously can also be called an item-based CF.\n",
    "* User-based Filtering: This type of CT recommends item to a user that similar users have liked. For example, let's say Alice and Bob have a similar interest in prediction methods, sql, and neural networks -- they are similar people. The record shows that Alice also liked the SNA module, then we can infer that Bob probably will also like the SNA module.\n",
    "\n",
    "The process is actually quite similar: Instead of evaluating on the similartity of content, we evaluate on the similarity of users. The following code evaluates the five most similar person to s5 in descending order. On the other hand, if we arrange the interest in ascending order, we will get recommendations that is not necessarily the first choice, which is often referred as serendipity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "50af845b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# First we need to clean up the dataset a little bit: Removing NaNs and naming rows\n",
    "interest_na = interest.dropna()\n",
    "interest_na.index = interest_na.id\n",
    "interest_clean = interest_na.drop('id', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "cd0b8195",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Obtain the cosine similarity matrix\n",
    "cosine_sim_interest = cosine_similarity(interest_clean, interest_clean)\n",
    "# Create an index for the student list\n",
    "id_indices = pd.Series(range(len(interest_clean.index)), index = interest_clean.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "273dd861",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id\n",
       "s2      1\n",
       "s6      5\n",
       "s12    11\n",
       "s13    12\n",
       "s16    15\n",
       "dtype: int64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Recycle the get_recommendations() that we have created\n",
    "get_recommendations(\"s5\", cosine_sim_interest, id_indices)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f957ae7",
   "metadata": {},
   "source": [
    "However, educational settings have important differences to purely commercial settings such as film or product suggestions. In regular commercial settings, similar/related products are good enough. However, in education, we would often want to plan the learning trajectory that moves learners forward instead of recommending the simple choices repeatedly or serendipitous choices that is too hard for learners.\n",
    "\n",
    "One solution is to include different measures to reflect a more comprehensive view of relations among users/items. As we have discussed previously in 4050, more data is great, but high dimensionality sometimes can be a curse. Dimensional reduction method such as PCA or singular value decomposition (SVD, a quite frequently used algorithm in RSs) can help you stay focused.\n",
    "\n",
    "Another way out is knoweldge-based RSs. This type of systems rely heavily on the domain knowledge and the production rules, which may not sound as \"data-mining\" as the other ways. However, in practice, knowledge-based RSs often yield promising results and can avoid many technical challenges (e.g., data sparsity, cold-start problem).\n",
    "\n",
    "Finally, in reality, we often develop hybrid systems that combine various techniques. For example, a hybrid system combining techniques A and B tries to use the advantages of A to fix the disadvantages of B. For instance, CF methods suffer from new-item problems, i.e., they cannot recommend items that have no ratings. This does not limit content-based approaches since the prediction for new items is based on their description (features) that are typically easily available."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
